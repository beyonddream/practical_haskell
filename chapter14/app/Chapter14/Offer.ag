imports
{
import Chapter14.Simple
import Data.List
import Data.String
import qualified Text.Blaze.Html5 as H
import qualified Text.Blaze.Html5.Attributes as A
}

data Offer a
    | Present present :: {a}
    | PercentDiscount discount :: Float
    | AbsoluteDiscount discount :: Float
    | Restrict products :: {[a]} inner :: (Offer {a})
    | From from :: Int inner :: (Offer {a})
    | Until until :: Int inner :: (Offer {a})
    | Extend times :: Int inner :: (Offer {a})
    | Both left :: (Offer {a}) right :: (Offer {a})
    | BetterOf left :: (Offer {a}) right :: (Offer {a})
    | If cond :: (Root {a}) then :: (Offer {a}) else :: (Offer {a})

data HtmlRoot a
    | HtmlRoot root :: (Offer {a})

deriving Offer : Show

deriving HtmlRoot Offer : Show

attr Offer
    chn counter :: Int
    syn title :: String
    syn subtitles :: {[(String, Int)]}
    syn presents use {++} {[]} :: {[a]}
    syn maxDuration use {min} {0} :: Int

attr HtmlRoot Offer
    syn html :: {H.Html}

imports
{
import Control.Applicative
}

sem Eq {a}, Show {a} => Offer
    | Present PercentDiscount AbsoluteDiscount
        loc.ident = @lhs.counter + 1
        lhs.counter = @loc.ident
    | Both BetterOf
        left.counter = @lhs.counter
        right.counter = @left.counter
        loc.ident = @right.counter + 1
        lhs.counter = @loc.ident
    | Restrict From Until Extend
        loc.ident = @lhs.counter + 1
        inner.counter = @loc.ident
    | If
        loc.ident = @lhs.counter + 1
        then.counter = @loc.ident
        else.counter = @loc.ident
    | Present PercentDiscount AbsoluteDiscount Restrict
      From Until Extend Both BetterOf If
        lhs.html = {
                do H.a H.! A.name (fromString ("elt" ++ show @loc.ident))
                        $ H.toHtml @loc.htmlText
                   @loc.htmlChild }
    | PercentDiscount
        loc.htmlText = show @discount ++ "% discount"
        loc.htmlChild = H.toHtml ""
    | BetterOf
        loc.htmlText = "Better of"
        loc.htmlChild =  { H.ul $ do H.li @left.html
                                     H.li @right.html }
    | Present
        loc.htmlText = "Present : " ++ (show @present)
        loc.htmlChild = H.toHtml ""
    | AbsoluteDiscount
        loc.htmlText = show @discount ++ " abs discount"
        loc.htmlChild = H.toHtml ""
    | Restrict
        loc.htmlText = "Restrict"
        loc.htmlChild = H.toHtml @inner.html
    | From
        loc.htmlText = "From"
        loc.htmlChild = H.toHtml @inner.html
    | Until
        loc.htmlText = "Until"
        loc.htmlChild = H.toHtml @inner.html
    | Extend
        loc.htmlText = "Extend"
        loc.htmlChild = H.toHtml @inner.html
    | Both
       loc.htmlText = "Both"
       loc.htmlChild = { H.ul $ do H.li @left.html
                                   H.li @right.html }
    | If
      loc.htmlText = "If"
      loc.htmlChild = { H.ul $ do H.li @then.html
                                  H.li @else.html }
    | PercentDiscount
        lhs.title = { "DISCOUNT: " ++ show @discount ++ "%" }
        lhs.subtitles = []
    | BetterOf
        lhs.title = { "BETTER OF" }
        lhs.subtitles = [ (@left.title, @left.counter)
                        , (@right.title, @right.counter) ]
    | Present
        lhs.title = { "PRESENT: " ++ (show @present) }
        lhs.subtitles = []
    | AbsoluteDiscount
        lhs.title = { "ABSOLUTE DISCOUNT: " ++ show @discount }
        lhs.subtitles = []
    | Restrict
        lhs.title = {"RESTRICT"}
        lhs.subtitles = [ (@inner.title, @inner.counter) ]
    | From
        lhs.title = {"FROM"}
        lhs.subtitles = [ (@inner.title, @inner.counter) ]
    | Until
        lhs.title = {"UNTIL"}
        lhs.subtitles = [ (@inner.title, @inner.counter) ]
    | Extend
        lhs.title = {"EXTEND"}
        lhs.subtitles = [ (@inner.title, @inner.counter) ]
    | Both
        lhs.title = {"BOTH"}
        lhs.subtitles = [ (@left.title, @left.counter)
                        , (@right.title, @right.counter) ]
    | If
        lhs.title = {"IF"}
        lhs.subtitles = [ (@then.title, @then.counter)
                        , (@else.title, @else.counter) ]


sem Eq {a}, Show {a} => HtmlRoot
    | HtmlRoot root.counter = 1
               lhs.html = {
                       do H.h1 $ H.toHtml "Description of an offer"
                          H.h2 $ H.toHtml "Possible presents:"
                          H.ul $ mapM_ (\e -> H.li $ H.toHtml (show e)) @root.presents
                          H.h2 $ H.toHtml "Main offer"
                          H.a H.! A.href (fromString ("#elt" ++ show @root.counter))
                                $ H.toHtml @root.title
                          H.ul $ mapM_ (\(s, e) -> H.li $ H.a H.! A.href (fromString ("#elt" ++ show e))
                                                        $ H.toHtml s)
                                    @root.subtitles
                          H.h2 $ H.toHtml "Complete offer"
                          @root.html }

