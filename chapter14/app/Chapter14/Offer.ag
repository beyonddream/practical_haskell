imports
{
import Chapter14.Simple
import Data.List
}

data Offer a
    | Present present :: {a}
    | PercentDiscount discount :: Float
    | AbsoluteDiscount discount :: Float
    | Restrict products :: {[a]} inner :: (Offer {a})
    | From from :: Int inner :: (Offer {a})
    | Until until :: Int inner :: (Offer {a})
    | Extend times :: Int inner :: (Offer {a})
    | Both left :: (Offer {a}) right :: (Offer {a})
    | BetterOf left :: (Offer {a}) right :: (Offer {a})
    | If cond :: (Root {a}) then :: (Offer {a}) else :: (Offer {a})

deriving Offer : Show

attr Offer
    syn presents use {++} {[]} :: {[a]}
    syn maxDuration use {min} {0} :: Int

sem Eq {a} => Offer
    | Present lhs.presents = [@present]
    | Restrict lhs.presents = { @products `intersect` @inner.presents }
    | From lhs.maxDuration = { min @from @inner.maxDuration }
    | Until lhs.maxDuration = { abs $ min (negate @until) @inner.maxDuration }
