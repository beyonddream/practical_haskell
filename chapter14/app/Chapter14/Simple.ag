data Expr a
    | AmountOf product :: {a}
    | PriceOf product :: {a}
    | TotalNumberOfProducts
    | TotalPrice
    | IVal val :: Int
    | FVal val :: Float
    | Plus right :: (Expr {a}) left :: (Expr {a})
    | Times right :: (Expr {a}) left :: (Expr {a})
    | LessThan right :: (Expr {a}) left :: (Expr {a})
    | Or right :: (Expr {a}) left :: (Expr {a})
    | And right :: (Expr {a}) left :: (Expr {a})
    | Not inner :: (Expr {a})

data Root a
    | Root expr :: (Expr {a})

deriving Root Expr : Show

attr Root Expr
    inh products :: {[(a, Float)]}
    syn intValue :: {Maybe Int}
    syn fltValue :: {Maybe Float}
    syn boolValue :: {Maybe Bool}

attr Expr
    inh numberOfProducts :: Int
    inh totalPrice :: Float


imports
{
import Control.Applicative
}

sem Eq {a} => Expr
    | TotalNumberOfProducts lhs.intValue = Just $ @lhs.numberOfProducts
                            lhs.fltValue = Nothing
                            lhs.boolValue = Nothing
    | Plus lhs.intValue = { (+) <$> @right.intValue <*> @left.intValue }
           lhs.fltValue = { (+) <$> @right.fltValue <*> @left.fltValue }
           lhs.boolValue = Nothing
           right.products = @lhs.products
           left.products = @lhs.products
    | AmountOf lhs.intValue = { Just $ length $ filter (\(n,p) -> n == @product) @lhs.products }
              lhs.fltValue = Nothing
              lhs.boolValue = Nothing
    | PriceOf lhs.fltValue = { Just $ head $ [ p | (n, p) <- @lhs.products , n == @product] }
              lhs.intValue = Nothing
              lhs.boolValue = Nothing
    | TotalPrice lhs.fltValue = Just $ @lhs.totalPrice
                 lhs.intValue = Nothing
                 lhs.boolValue = Nothing
    | IVal lhs.intValue = Just @val
           lhs.fltValue = Nothing
           lhs.boolValue = Nothing
    | FVal lhs.intValue = Nothing
           lhs.fltValue = Just @val
           lhs.boolValue = Nothing
    | Times lhs.intValue = { (*) <$> @right.intValue <*> @left.intValue }
            lhs.fltValue = { (*) <$> @right.fltValue <*> @left.fltValue }
            lhs.boolValue = Nothing
            right.products = @lhs.products
            left.products = @lhs.products
    | LessThan lhs.intValue = Nothing
               lhs.fltValue = Nothing
               lhs.boolValue = { (<) <$> @right.fltValue <*> @left.fltValue <|>
                                 (<) <$> @right.intValue <*> @left.intValue
                                }
               right.products = @lhs.products
               left.products = @lhs.products
    | Or lhs.intValue = Nothing
         lhs.fltValue = Nothing
         lhs.boolValue = { (||) <$> @right.boolValue <*> @left.boolValue }
         right.products = @lhs.products
         left.products = @lhs.products
    | And lhs.intValue = Nothing
          lhs.fltValue = Nothing
          lhs.boolValue = { (&&) <$> @right.boolValue <*> @left.boolValue }
          right.products = @lhs.products
          left.products = @lhs.products
    | Not lhs.intValue = Nothing
          lhs.fltValue = Nothing
          lhs.boolValue = { (not) <$> @inner.boolValue }
          inner.products = @lhs.products

sem Eq {a} => Root
    | Root expr.numberOfProducts = length @lhs.products
           expr.totalPrice       = foldr (\(_,p) x -> p + x) 0.0 @lhs.products




